'''
Created on 24.08.2013

@author: tintin
'''
import modules.QA_Logger as QA_Logger
LOG = QA_Logger.getLogger(name="argBrute")

import subprocess, os, time, signal

class Exploit(object):
    
    def shellex(self,cmd,args=[], shell=False, max_execution_time=10):
        """shell exec wrapper"""
        if isinstance(cmd,basestring):
            cmd=[cmd]
        
        out = ""
        try:
            
            ret = subprocess.Popen(cmd+args, shell=shell,stdout=subprocess.PIPE,stderr=subprocess.STDOUT)  
            self.wait_timeout(ret,max_execution_time)
            
            if not ret:
                raise "Exception - returned false"
            out, _ = ret.communicate()
            
        except RuntimeError, er:
            LOG.info( "Timeout - %s" %" ".join(cmd))
            os.kill(ret.pid,9)  #SIGKILL
            
        except Exception, e:
            LOG.exception("%s - (cmd=%s, args=%s, shell=%s, exec_time=%s"%(e,cmd,args,shell,max_execution_time))

        return out
    
    def wait_timeout(self,proc, seconds):
        """Wait for a process to finish, or raise exception after timeout"""
        start = time.time()
        end = start + seconds
        interval = min(seconds / 1000.0, .25)
    
        while True:
            result = proc.poll()
            if result is not None:
                return result
            if time.time() >= end:
                raise RuntimeError("Process timed out")
            time.sleep(interval)
    
    def check_log(self,filter=['gfault','error'],compare_with=None):
        """diff LogCheck"""
 
        entries = self.shellex(cmd="dmesg | egrep -i '(%s)'"%"|".join(filter),shell=True)       
        entries = entries.split("\n")
        output = []
        if compare_with:
            for line in entries:
                if line not in compare_with:
                    output.append(line)
        else: 
            output = entries
        return output
    
    def badchars(self,skip=[]):
        """generate badchars"""
        return "".join([chr(i) for i in range(256) if not i in skip])    

    def createPatternCyclic(self,size):
        """generate cyclic pattern"""
        char1="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        char2="abcdefghijklmnopqrstuvwxyz"
        char3="0123456789"
        
        charcnt=0
        pattern=""
        max=int(size)
        while charcnt < max:
            for ch1 in char1:
                for ch2 in char2:
                    for ch3 in char3:
                        if charcnt<max:
                            pattern=pattern+ch1
                            charcnt=charcnt+1
                        if charcnt<max:
                            pattern=pattern+ch2
                            charcnt=charcnt+1
                        if charcnt<max:
                            pattern=pattern+ch3
                            charcnt=charcnt+1
        return pattern 